{"version":3,"sources":["Components/Content/Content.module.css","Components/Greet/Greet.module.css","Components/InputNya/InputNya.module.css","Components/Monday/Monday.module.css","Components/Contacts/Contacts.module.css","Components/Priorities/Priorities.module.css","Components/Tuesday/Tuesday.module.css","Components/Navbar/Navbar.tsx","Components/Contacts/Contacts.tsx","Components/Content/Content.tsx","Components/Priorities/Priorities.tsx","Components/InputNya/InputNya.tsx","Components/Greet/Greet.tsx","Components/Monday/Monday.tsx","Components/Common/EditableSpan/EditableSpan.tsx","Components/Common/Local/local.tsx","Components/Tuesday/Tuesday.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Navbar","className","activeClassName","to","Contacts","styles","conteiner_header","Content","content_wrap","content_text","content_elem","content_time","contact_photo","Priorities","useState","id","name","priority","setPriority","filter","setFilter","changeFilter","value","p","PriorityElement","map","key","onClick","filteredPriority","removePriority","list","InputNya","props","onEnter","error","onChangeHandler","onChange","restProps","s","errorInp","e","currentTarget","onKeyPress","type","errorInp_message","Greet","setError","greetNames","setGreetNames","sayHello","replace","correctedName","toUpperCase","slice","alert","newName","v1","newNames","nameStorage","setNameStorage","n","index","main_content","greetList","Monday","PreJuniorContent_wrap","title","EditableSpan","editMode","setEditMode","changedValue","state","stateAsString","JSON","stringify","localStorage","setItem","saveState","x","y","defaultState","getItem","parse","restoreState","Tuesday","content","App","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.44dc456b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content_wrap\":\"Content_content_wrap__2CwKT\",\"content_text\":\"Content_content_text__wclC_\",\"content_time\":\"Content_content_time__Ay7Bo\",\"contact_photo\":\"Content_contact_photo__1PyKJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_content\":\"Greet_main_content__3pVsv\",\"greetList\":\"Greet_greetList__3FY7w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInp\":\"InputNya_errorInp__ZVVkU\",\"errorInp_message\":\"InputNya_errorInp_message__1L484\",\"inp_wrap\":\"InputNya_inp_wrap__22hs9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Monday_title__C3xad\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"conteiner_header\":\"Contacts_conteiner_header__nNn8M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Priorities_list__2Dizq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Tuesday_content__2sWi9\"};","import React from \"react\";\r\nimport  './Navbar.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\nreturn(\r\n    <div className=\"dropdown\">\r\n        <ul className=\"dropdown_content\">\r\n            <li className='item'><NavLink className={'dropdownContent_item'} activeClassName={'active'} to=\"/Monday\">Monday</NavLink></li>\r\n            <li className='item'><NavLink className={'dropdownContent_item'} activeClassName={'active'} to=\"/Tuesday\">Tuesday</NavLink></li>\r\n        </ul>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\nimport '../../App.css';\r\nimport styles from './Contacts/../Contacts.module.css';\r\n\r\n\r\n\r\nfunction Contacts() {\r\n\r\n    let Friends = {\r\n        name: 'Yusov Dmitry'\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4 className={styles.conteiner_header}>{Friends.name}</h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport '../../App.css';\r\nimport styles from './Content.module.css';\r\n\r\n\r\n\r\nfunction Content() {\r\n\r\n    let Post = {\r\n        message: \"What's up Bro?\"\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.content_wrap}>\r\n                <p className={styles.content_text}><span className={styles.content_elem}>{Post.message}</span></p>\r\n                <time className={styles.content_time}>15:00</time>\r\n            </div>\r\n            <div className={styles.contact_photo}>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Content;\r\n","import React, {useState} from 'react';\r\nimport styles from './Priorities.module.css';\r\n\r\n\r\ntype PriorityType = {\r\n    name: string\r\n    priority: string\r\n    id: number\r\n}\r\n\r\ntype PrioritiesPropsType = {\r\n    priority: Array<PriorityType>\r\n    removePriority: (id:number) => void\r\n    changeFilter: (value: FilterValueType) => void\r\n    prioritiesForPrioritiesList:() => void\r\n}\r\n\r\n type FilterValueType = 'all' | 'high' | 'middle' | 'low'\r\n\r\nfunction Priorities() {\r\n\r\n    let [priority, setPriority] = useState([\r\n        {id: 1, name: 'Work', priority: 'high'},\r\n        {id: 2, name: 'Study', priority: 'high'},\r\n        {id: 3, name: 'Sport', priority: 'middle'},\r\n        {id: 4, name: 'Amusement', priority: 'low'}\r\n    ])\r\n\r\n    let [filter, setFilter] = useState<FilterValueType>('all')\r\n\r\n    function removePriority(id: number) {\r\n        let filteredPriority = priority.filter(p => p.id !== id)\r\n        setPriority(filteredPriority)\r\n    }\r\n\r\n    let prioritiesForPrioritiesList = priority\r\n    if (filter === 'high') {\r\n        prioritiesForPrioritiesList = priority.filter(p => p.priority === 'high')\r\n    }\r\n    if (filter === 'middle') {\r\n        prioritiesForPrioritiesList = priority.filter(p => p.priority === 'middle')\r\n    }\r\n    if (filter === 'low') {\r\n        prioritiesForPrioritiesList = priority.filter(p => p.priority === 'low')\r\n    }\r\n\r\n    function changeFilter(value: FilterValueType) {\r\n        setFilter(value)\r\n    }\r\n\r\n let PriorityElement =  priority.map((p: PriorityType) => <li key={p.id}>{p.name} : {p.priority} <button onClick={()=>{removePriority(p.id)}}>x</button></li>)\r\n\r\n    return (<div>\r\n            <h3>Current tasks priopities</h3>\r\n            <ul className={styles.list}>\r\n              {PriorityElement}\r\n            </ul>\r\n            <div>\r\n                <button onClick={() => changeFilter('all')}>All</button>\r\n                <button onClick={() => changeFilter('high')}>High</button>\r\n                <button onClick={() => changeFilter('middle')}>Middle</button>\r\n                <button onClick={() => changeFilter('low')}>Low</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Priorities","import React, {KeyboardEvent, ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, useState} from 'react';\r\nimport s from './InputNya.module.css'\r\nimport InputNyaButton from \"../InputNyaButton/InputNyaButton\";\r\n\r\n\r\nexport type InputNyaPropsType =\r\n    DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & {\r\n    onEnter?: () => void,\r\n    onChangeHandler:(value:string) => void\r\n    error?: string\r\n};\r\n\r\n\r\nfunction InputNya(props: InputNyaPropsType) {\r\n\r\n    const {onEnter, error, onChange, onChangeHandler, ...restProps} = props;\r\n\r\n    let onAddTitle = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n if (onEnter) {\r\n     onEnter()\r\n }\r\n        }\r\n    }\r\n\r\n    const inputOnChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChangeHandler(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <input className={error ? s.errorInp : ''} onChange={inputOnChangeHandler}\r\n                       onKeyPress={onAddTitle}\r\n                       {...restProps} type=\"text\"/>\r\n            </div>\r\n            {error && <div className={s.errorInp_message}>{error}</div>}\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default InputNya\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport styles from './Greet.module.css'\r\nimport InputNya from \"../InputNya/InputNya\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype greetNamesArrayType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\n\r\ntype NamesType = {\r\n    id: string,\r\n    name: string\r\n}\r\n\r\nfunction Greet() {\r\n\r\n    let [error, setError] = useState('')\r\n\r\n    let [greetNames, setGreetNames] = useState<Array<NamesType>>([])\r\n\r\n    function sayHello(name: string) {\r\n        name = name.replace(/^\\s+|\\s+$/g, '')\r\n        if (!name) {\r\n            setError('Please enter name')\r\n        } else {\r\n            let correctedName = name[0].toUpperCase() + name.slice(1)\r\n            alert('Hello ' + correctedName);\r\n            let newName = {id: v1(), name: correctedName}\r\n            let newNames = [...greetNames, newName]\r\n            setGreetNames(newNames)\r\n            setError('')\r\n        }\r\n    }\r\n\r\n    let [nameStorage, setNameStorage] = useState(\"\")\r\n\r\n    let list = greetNames.map((n, index) => <li>{index + 1} {n.name}</li>)\r\n\r\n    return (\r\n        <div className={styles.main_content}>\r\n            <InputNya  value={nameStorage}\r\n                      onChangeHandler={(value: string) => {\r\n                          setNameStorage(value)\r\n                          setError('')\r\n                      }}\r\n                      error={error}\r\n                      onEnter={() => {\r\n                          sayHello(nameStorage)\r\n                          setNameStorage(\"\")\r\n                      }}/>\r\n            <button onClick={() => {sayHello(nameStorage)\r\n                setNameStorage(\"\")\r\n            }}>Button Hello</button>\r\n            <ul className={styles.greetList}>\r\n                {list}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Greet\r\n\r\n","import React, {useState} from \"react\";\r\nimport Contacts from \"../Contacts/Contacts\";\r\nimport Content from \"../Content/Content\";\r\nimport Priorities from \"../Priorities/Priorities\";\r\nimport Greet from \"../Greet/Greet\";\r\nimport styles from './Monday.module.css'\r\nimport EditableSpan from \"../Common/EditableSpan/EditableSpan\";\r\n\r\n\r\nfunction Monday() {\r\n\r\n    return (\r\n        <div className={styles.PreJuniorContent_wrap}>\r\n            <span className={styles.title}>Monday</span>\r\n            <div className='message_conteiner'>\r\n                <Contacts/>\r\n                <Content/>\r\n            </div>\r\n            <Priorities/>\r\n            <Greet/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Monday\r\n\r\n","import React, {useState} from \"react\"\r\nimport InputNya from \"../../InputNya/InputNya\";\r\nimport styles from './EditableSpan.module.css'\r\nimport {restoreState, saveState, StateType} from \"../Local/local\";\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    setNameStorage: (value: string) => void\r\n    nameStorage: string\r\n    changedValue: () => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(true)\r\n\r\n    const tegsChangeHandler = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\nconst SaveValue = () => {\r\n    saveState<StateType>(\"test\", {x: props.nameStorage, y: 1})\r\n    alert(props.nameStorage)\r\n}\r\n\r\nconst ChackSavedValue = () => {\r\n    const state: StateType = restoreState<StateType>(\"test\", {x: \"\", y: 0})\r\nalert(state.x)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <span onClick={tegsChangeHandler}>My Span</span>\r\n                : <InputNya onChangeHandler={(value: string) => {\r\n                    props.setNameStorage(value)\r\n                }}\r\n                            value={props.nameStorage}\r\n                            onEnter={() => {\r\n                                props.changedValue()\r\n                            }}/>}\r\n                            <button onClick={SaveValue}>Save Value</button>\r\n                            <button onClick={ChackSavedValue}>Chack Saved Value</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditableSpan\r\n","\r\n\r\nexport type StateType = {\r\n    x: string\r\n    y: number\r\n}\r\n\r\n\r\n\r\n    export function saveState<T> (key: string, state: T) {\r\n        const stateAsString = JSON.stringify(state);\r\n        localStorage.setItem(key, stateAsString)\r\n    }\r\n\r\n    export function restoreState<T>(key: string, defaultState: T) {\r\n        const stateAsString = localStorage.getItem(key);\r\n        if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n        return defaultState;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport styles from './Tuesday.module.css'\r\nimport EditableSpan from \"../Common/EditableSpan/EditableSpan\";\r\n\r\n\r\nfunction Tuesday() {\r\n\r\n    let [nameStorage, setNameStorage] = useState(\"\")\r\n\r\n    const changedValue = () => {\r\n        setNameStorage(nameStorage)\r\n        alert(nameStorage)\r\n        setNameStorage('')\r\n    }\r\n\r\n    return <div className={styles.content}>\r\n        <div>Tuesday</div>\r\n        <EditableSpan\r\n            setNameStorage={setNameStorage}\r\n            nameStorage={nameStorage}\r\n            changedValue={changedValue}\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default Tuesday","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./Components/Navbar/Navbar\";\r\nimport Monday from \"./Components/Monday/Monday\";\r\nimport Tuesday from \"./Components/Tuesday/Tuesday\";\r\nimport {Route} from 'react-router-dom';\r\n\r\n\r\nfunction App() {\r\n\r\n    return (<div className={'AppWrap'}>\r\n            <div className={'navWrap'}>\r\n                <Navbar/>\r\n            </div>\r\n            <div className={'contWrap'}>\r\n                <Route path='/Monday' render={() => <Monday/>}/>\r\n                <Route path='/Tuesday' render={() => <Tuesday/>}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <App/>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}